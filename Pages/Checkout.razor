@page "/checkout"
@using BlazingBooks.Services
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject BookService BS

<div class="top-bar">
    <NavLink href=@HomePageURI Match="NavLinkMatch.All" class="logo">
        <img src="img/logo.svg" />
    </NavLink>
@*    <NavLink href="/books" Match="NavLinkMatch.Prefix" class="nav-tab">
        <img src="img/book-slice.svg" />
        <div>Get book</div>
    </NavLink>*@
</div>

<div class="main">
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            @foreach (var bookCountPair in Order.Books)
            {
                <p>
                    <strong>
                        @bookCountPair.Value
                        @bookCountPair.Key.Title
                        <span class="total-price">@(bookCountPair.Key.Price * bookCountPair.Value)</span>
                    </strong>
                </p>
            }

            <p>
                <strong>
                    Итого:
                    <span class="total-price">@Order.GetFormattedTotalPrice()</span>
                </strong>
            </p>
        </div>
    </div>

    <button class="checkout-button btn btn-warning" @onclick="PlaceOrder" disabled=@IsSubmitting>
        Place order
    </button>
</div>

@code {
    Order Order => OrderState.Order;
    public string HomePageURI { get; set; }
    bool IsSubmitting;

    public async Task PlaceOrder()
    {
        IsSubmitting = true;
        foreach (var bookToOrder in OrderState.Order.Books)
        {        
            var buyingTask= BS.BuyBooks(bookToOrder);
            await buyingTask;
            buyingTask.Wait();
        }
        
        OrderState.ResetOrder();
        NavigationManager.NavigateTo("/");
    }

    protected override Task OnInitializedAsync()
    {
        HomePageURI = NavigationManager.BaseUri;
        return base.OnInitializedAsync();
    }
}